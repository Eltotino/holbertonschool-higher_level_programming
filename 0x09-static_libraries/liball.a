!<arch>
0-isupper.c/    0           0     0     644     235       `
#include "holberton.h"
/**
 * _isupper	 - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _isupper(int c)
{
	return (c);

}
0-memset.c/     0           0     0     644     305       `
#include "holberton.h"

/**
 * _memset - prints buffer in hexa
 * @s: the address of memory to print
 * @b: the size of the memory to print
 * @n: fdfdfdfs
 * Return: Nothing.
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i = 0;

	while (i < n)
	{
		s[i] = b;
		i++;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     333       `
#include "holberton.h"

/**
 *_strcat - check the code for Holberton School students.
 *@dest: fjdkfjXSXCdf
 *@src: fdflkdfd
 * Return: Always 0.
 */
char *_strcat(char *dest, char *src)
{
	int i = 0;
	int y = 0;

	while (dest[i] != '\0')
	{
		i++;
	}
	while (src[y] != '\0')
	{
		dest[i] = src[y];
		i++;
		y++;
	}
	return (dest);
}
1-isdigit.c/    0           0     0     644     227       `
#include "holberton.h"
#include <stdio.h>

/**
 * _isdigit - check the code for Holberton School students.
 *@c: fdfdfd
 * Return: Always 0.
 */
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
		return (1);
	else
		return (0);
}
1-memcpy.c/     0           0     0     644     343       `
#include "holberton.h"

/**
 * _memcpy - prints buffer in hexa
 * @dest: the address of memory to print
 * @src: the size of the memory to print
 * @n: fdjfdfd
 * Return: Nothing.
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	int i = 0;
	int j = 0;

	while (n > 0)
	{
		dest[i] = src[j];
		i++;
		j++;
		n--;
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     369       `
#include "holberton.h"
/**
 * _strncat - check the code for Holberton School students.
 *@dest: fdifjdklf
 *@src: fkdjfkdjfd
 *@n: fkldjfldjflk
 * Return: Always 0.
 */
char *_strncat(char *dest, char *src, int n)
{
	int i = 0;
	int y = 0;

	while (dest[i] != '\0')
	{
		i++;
	}
	while (y < n && src[y] != '\0')
	{
		dest[i] = src[y];
		y++;
		i++;
	}
	return (dest);
}
100-atoi.c/     0           0     0     644     156       `
#include "holberton.h"
/**
 * _atoi - check the code for Holberton School students.
 *@s: dfsdf
 * Return: Always 0.
 */
int _atoi(char *s)
{
return (*s);
}2-strchr.c/     0           0     0     644     336       `
#include "holberton.h"
#include <stdio.h>

/**
 * _strchr - check the code for Holberton School students.
 *@s:fdkjfdf
 *@c: fdhdskljsjd
 * Return: Always 0.
 */
char *_strchr(char *s, char c)
{
	int i = 0;
	int y = 0;

	while (s[i] != '\0')
	{
		i++;
	}
	while (y <= i)
	{
		if (s[y] == c)
			return (&(s[y]));
		y++;
	}
	return (0);
}2-strlen.c/     0           0     0     644     219       `
#include "holberton.h"
/**
 * _strlen - check the code for Holberton School students.
 *@s: fdflmdkfdf
 * Return: Always 0.
 */
int _strlen(char *s)
{
	int i = 0;

	while ((*(s + i)) != '\0')
	{
		i++;
	}
	return (i);
}
2-strncpy.c/    0           0     0     644     482       `
#include "holberton.h"
/**
 * _strncpy - check the code for Holberton School students.
 *@dest: fdfdf
 *@src: fkdljflkdjfd
 *@n: fkdjfkdjfkldfj
 * Return: Always 0.
 */
char *_strncpy(char *dest, char *src, int n)
{
	int x = 0;
	int z = 0;
	int i;

	while (dest[x] != '\0')
	{
		x++;
	}
	while (src[z] != '\0')
	{
		z++;
	}
	for (i = 0; i < n; i++)
	{
		if (src[n - 1] != '\0')
			dest[i] = 0;
		if (i > z)
			dest[i] = '\0';
		else
		{
			dest[i] = src[i];
		}
	}
	return (dest);
}3-islower.c/    0           0     0     644     242       `
#include "holberton.h"
/**
 * _islower - hello betty
 *@c: dfdfdfd
 * Return: Description of the returned value
 */
int _islower(int c)
{
	if ((c >= 'a') && (c <= 'z'))
		return (1);
	if ((c >= 'A') && (c <= 'Z'))
		return (0);
	return (0);
}3-puts.c/       0           0     0     644     245       `
#include "holberton.h"

/**
 * _puts - check the code for Holberton School students.
 *@str: fdffdfd
 * Return: Always 0.
 */
void _puts(char *str)
{
	int i = 0;

	while ((*(str + i) != '\0'))
	{
		_putchar(str[i]);
		i++;
	}
	_putchar('\n');

}
3-strcmp.c/     0           0     0     644     303       `
#include "holberton.h"
/**
 * _strcmp - check the code for Holberton School students.
 *@s1: dfdfdfd
 *@s2: jkdhfkjdhfkjd
 * Return: Always 0.
 */
int _strcmp(char *s1, char *s2)
{
	int i = 0;

	while (s1[i] != '\0')
	{
		if (s1[i] != s2[i])
		{
			return (s1[i] - s2[i]);
		}
		i++;
	}
	return (0);
}


3-strspn.c/     0           0     0     644     436       `
#include "holberton.h"

/**
 * _strspn - check the code for Holberton School students.
 *@s: rfkjdgfhjdk
 *@accept: fjkdfhjdkf
 * Return: Always 0.
 */
unsigned int _strspn(char *s, char *accept)
{
	int i = 0;
	int y = 0;
	int n = 0;
	int z = 0;

	while (s[i] != ' ' && s[i] != '\0')
	{
		i++;
	}
	while (y <= i)
	{
		z = 0;
		while (accept[z] != '\0')
		{
			if (s[y] == accept[z])
				n = n + 1;
			z++;
		}
		y++;
	}
	return (n);
}

4-isalpha.c/    0           0     0     644     286       `
#include "holberton.h"
/**
 * _isalpha - check the code for Holberton School students.
 *@c: dsdsds
 *Return: Description of the returned value
 */
int _isalpha(int c)
{
	if ((c >= 'A') && (c <= 'Z'))
		return (1);
	else if ((c >= 'a') && (c <= 'z'))
		return (1);
	else
		return (0);
}4-strpbrk.c/    0           0     0     644     386       `
#include "holberton.h"

/**
 * _strpbrk - check the code for Holberton School students.
 *@s: fkdhfjkdf
 *@accept: fkdhfkld
 * Return: Always 0.
 */
char *_strpbrk(char *s, char *accept)
{
	int i = 0;
	int y = 0;
	int z = 0;

	while (s[i] != '\0')
		i++;
	while (y <= i)
	{
		z = 0;
		while (z <= i)
		{
			if (s[y] == accept[z])
				return (&s[y]);
			z++;
		}
		y++;
	}
	return (0);
}5-strstr.c/     0           0     0     644     385       `
#include "holberton.h"
/**
 * _strstr - strings
 * @haystack: later
 * @needle: google
 *
 * Return: rotle dfds
 */
char *_strstr(char *haystack, char *needle)
{
	char *h = haystack;
	char *n = needle;

	while (*h)

		n = needle;
	h = haystack;
	while (*n)
	{
		if (*h == *n)
		{
			n++;
			h++;
		}
		else
			break;
	}
	if (*n == '\0')
		return (haystack);
	haystack++;
return (0);
}

6-abs.c/        0           0     0     644     211       `
#include "holberton.h"
/**
 * _abs - check the code for Holberton School students.
 * @x: dsdsd
 * Return: Always 0.
 */
int _abs(int x)
{
	if (x >= 0)
		return (x);
	if (x < 0)
		return (x * -1);
	return (0);
}
9-strcpy.c/     0           0     0     644     358       `
#include "holberton.h"
/**
 * _strcpy - copy string pointed to src to the buffer pointed to dest
 * @dest: destination
 * @src: source
 * Return: a character.
 */
char *_strcpy(char *dest, char *src)
{
	int a = 0;
	int i;

	while ((*(src + a) != '\0'))
	{
		a++;
	}
	for (i = 0; i < a; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = src[i];
	return (&dest[0]);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

main.c/         0           0     0     644     92        `
void print_alphabet(void);

int main(void)
{
        print_alphabet();
        return (0);
}